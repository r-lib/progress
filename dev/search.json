[{"path":"http://r-lib.github.io/progress/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. Rich FitzJohn. Author. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"http://r-lib.github.io/progress/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G, FitzJohn R (2023). progress: Terminal Progress Bars. R package version 1.2.2.9000, http://r-lib.github.io/progress/, https://github.com/r-lib/progress#readme.","code":"@Manual{,   title = {progress: Terminal Progress Bars},   author = {Gábor Csárdi and Rich FitzJohn},   year = {2023},   note = {R package version 1.2.2.9000, http://r-lib.github.io/progress/},   url = {https://github.com/r-lib/progress#readme}, }"},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Terminal Progress Bars","text":"Install package CRAN:","code":"install.packages(\"progress\")"},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Terminal Progress Bars","text":"Use progress_bar R6 class: progress bar displayed first tick command. might desirable long computations, nothing shown first tick. good practice call tick(0) beginning computation download, shows progress bar immediately. Custom format, estimated time completion: elapsed time: number number ticks/total: custom tokens: can show download rates files unknown sizes: Progress bars can also digress, supplying negative values tick(): See manual details options.","code":"library(progress) pb <- progress_bar$new(total = 100) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) } [==========================================================-------------]  81% pb <- progress_bar$new(total = 100) f <- function() {   pb$tick(0)   Sys.sleep(3)   for (i in 1:100) {     pb$tick()     Sys.sleep(1 / 100)   } } f() pb <- progress_bar$new(   format = \"  downloading [:bar] :percent eta: :eta\",   total = 100, clear = FALSE, width= 60) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) } downloading [========----------------------]  28% eta:  1s pb <- progress_bar$new(   format = \"  downloading [:bar] :percent in :elapsed\",   total = 100, clear = FALSE, width= 60) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) } downloading [==========================------]  80% in  1s pb <- progress_bar$new(   format = \"  downloading [:bar] :elapsedfull\",   total = 1000, clear = FALSE, width= 60) for (i in 1:1000) {   pb$tick()   Sys.sleep(1 / 100) } downloading [=====================--------------] 00:00:08 total <- 1000 pb <- progress_bar$new(format = \"[:bar] :current/:total (:percent)\", total = total) f <- function() {   pb$tick(0)   Sys.sleep(3)   for (i in 1:total) {     pb$tick(1)     Sys.sleep(1 / 100)   } } f() [============================-------------------------------------------------] 370/1000 ( 37%) pb <- progress_bar$new(   format = \"  downloading :what [:bar] :percent eta: :eta\",   clear = FALSE, total = 200, width = 60) f <- function() {   for (i in 1:100) {     pb$tick(tokens = list(what = \"foo   \"))     Sys.sleep(2 / 100)   }   for (i in 1:100) {     pb$tick(tokens = list(what = \"foobar\"))     Sys.sleep(2 / 100)   } } f() downloading foo    [======------------------]  27% eta:  4s pb <- progress_bar$new(   format = \"  downloading foobar at :rate, got :bytes in :elapsed\",   clear = FALSE, total = 1e7, width = 60) f <- function() {   for (i in 1:100) {     pb$tick(sample(1:100 * 1000, 1))     Sys.sleep(2/100)   }   pb$tick(1e7)   invisible() } f() downloading foobar at 5.42 MB/s, got 15.45 MB in  3s pb <- progress_bar$new() f <- function() {   pb$tick(50)  ; Sys.sleep(1)   pb$tick(-20) ; Sys.sleep(1)   pb$tick(50)  ; Sys.sleep(1)   pb$tick(-30) ; Sys.sleep(1)   pb$tick(100) } f()"},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"usage-with-purrr-iterators","dir":"","previous_headings":"","what":"Usage with purrr iterators","title":"Terminal Progress Bars","text":"prefer iterative tasks using purrr family functional programming tools, rather loops, two straightforward ways add progress bars: Increment ticks -line calling purrr iterator. Define task increment ticks separate wrapper function. Option 1 concise simple one-line tasks (e.g. requiring single function call), Option 2 probably preferred complex multi-line tasks.","code":"# Option 1 pb <- progress_bar$new(total = 100) purrr::walk(1:100, ~{pb$tick(); Sys.sleep(0.1)}) [================================================>------]  89% # Option 2 pb <- progress_bar$new(total = 100)  foo <- function(x){   pb$tick()   Sys.sleep(0.1) }  purrr::walk(1:100, foo) [==================>------------------------------------]  34%"},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"creating-a-plyr-compatible-progress-bar","dir":"","previous_headings":"","what":"Creating a plyr compatible progress bar","title":"Terminal Progress Bars","text":"easy create progress bars plyr: can try ","code":"progress_progress <- function(...) {   pb <- NULL   list(     init = function(x, ...) {       pb <<- progress_bar$new(total = x, ...)     },     step = function() {       pb$tick()     },     term = function() NULL   ) } plyr::l_ply(   1:100,   .fun = function(...) Sys.sleep(0.01),   .progress = 'progress' )"},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"c-api","dir":"","previous_headings":"","what":"C++ API","title":"Terminal Progress Bars","text":"package also provides C++ API, can used without Rcpp. See example package included within progress. short excerpt shows works: C++ API almost functionality R API, except currently support custom tokens, custom streams, callback functions. Note C++ R APIs independent single progress bar need use either one exclusively.","code":"#include <RProgress.h>  ...  RProgress::RProgress pb(\"Downloading [:bar] ETA: :eta\");    pb.tick(0);   for (int i = 0; i < 100; i++) {     usleep(2.0 / 100 * 1000000);     pb.tick();   }  ..."},{"path":"http://r-lib.github.io/progress/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Terminal Progress Bars","text":"MIT @ Gábor Csárdi, RStudio Inc","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress-package.html","id":null,"dir":"Reference","previous_headings":"","what":"progress: Terminal Progress Bars — progress-package","title":"progress: Terminal Progress Bars — progress-package","text":"Configurable Progress bars, may include percentage, elapsed time, /estimated completion time. work terminals, 'Emacs' 'ESS', 'RStudio', 'Windows' 'Rgui' 'macOS' 'R.app'. package also provides 'C++' 'API', works without 'Rcpp'.","code":""},{"path":[]},{"path":"http://r-lib.github.io/progress/dev/reference/progress-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"progress: Terminal Progress Bars — progress-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com Authors: Rich FitzJohn contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Progress bar in the terminal — progress_bar","title":"Progress bar in the terminal — progress_bar","text":"Progress bars configurable, may include percentage, elapsed time, /estimated completion time. work command line, Emacs R Studio. progress package heavily influenced https://github.com/tj/node-progress","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":"creating-the-progress-bar","dir":"Reference","previous_headings":"","what":"Creating the progress bar","title":"Progress bar in the terminal — progress_bar","text":"progress bar R6 object, can created progress_bar$new(). following arguments: format format progress bar. number tokens can used , see . defaults \"[:bar] :percent\", means progress bar within brackets left, percentage printed right. total Total number ticks complete. unknown, use NA . Defaults 100. width Width progress bar. Default current terminal width (see options() width) minus two. stream argument deprecated, message() used print progress bar. complete Completion character, defaults =. incomplete Incomplete character, defaults -. current Current character, defaults >. callback Callback function call progress bar finishes. progress bar object passed single parameter. clear Whether clear progress bar completion. Defaults TRUE. show_after Amount time seconds, progress bar shown screen. short processes, probably worth showing . Defaults two tenth second. force Whether force showing progress bar, even given (default) stream seem support . message_class Extra classes add message conditions signalled progress bar.","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":"using-the-progress-bar","dir":"Reference","previous_headings":"","what":"Using the progress bar","title":"Progress bar in the terminal — progress_bar","text":"Three functions can update progress bar. progress_bar$tick() increases number ticks one (another specified value). progress_bar$update() sets given ratio progress_bar$terminate() removes progress bar. progress_bar$finished can used see progress bar finished. Note progress bar shown immediately, show_after seconds. (Set zero, call tick(0) force showing progress bar.) progress_bar$message() prints message progress bar. fails progress bar already finished.","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":"tokens","dir":"Reference","previous_headings":"","what":"Tokens","title":"Progress bar in the terminal — progress_bar","text":"can used format argument creating progress bar. :bar progress bar . :current Current tick number. :total Total ticks. :elapsed Elapsed time seconds. :elapsedfull Elapsed time hh:mm:ss format. :eta Estimated completion time seconds. :percent Completion percentage. :rate Download rate, bytes per second. See example . :tick_rate Similar :rate, assume units bytes, just print raw number ticks per second. :bytes Shows :current, formatted bytes. Useful downloads file reads know size file advance. See example . :spin Shows spinner updates even progress advanced zero. Custom tokens also supported, need pass values progress_bar$tick() progress_bar$update(), named list. See example .","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"Progress bar in the terminal — progress_bar","text":"progress_enabled option can set FALSE turn progress bar. works C++ progress bar well.","code":""},{"path":"http://r-lib.github.io/progress/dev/reference/progress_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progress bar in the terminal — progress_bar","text":"","code":"## We don't run the examples on CRAN, because they takes >10s ## altogether. Unfortunately it is hard to create a set of ## meaningful progress bar examples that also run quickly. if (FALSE) {  ## Basic pb <- progress_bar$new(total = 100) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) }  ## ETA pb <- progress_bar$new(   format = \"  downloading [:bar] :percent eta: :eta\",   total = 100, clear = FALSE, width= 60) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) }  ## Elapsed time pb <- progress_bar$new(   format = \"  downloading [:bar] :percent in :elapsed\",   total = 100, clear = FALSE, width= 60) for (i in 1:100) {   pb$tick()   Sys.sleep(1 / 100) }  ## Spinner pb <- progress_bar$new(   format = \"(:spin) [:bar] :percent\",   total = 30, clear = FALSE, width = 60) for (i in 1:30) {   pb$tick()   Sys.sleep(3 / 100) }  ## Custom tokens pb <- progress_bar$new(   format = \"  downloading :what [:bar] :percent eta: :eta\",   clear = FALSE, total = 200, width = 60) f <- function() {   for (i in 1:100) {     pb$tick(tokens = list(what = \"foo   \"))     Sys.sleep(2 / 100)   }   for (i in 1:100) {     pb$tick(tokens = list(what = \"foobar\"))     Sys.sleep(2 / 100)   } } f()  ## Download (or other) rates pb <- progress_bar$new(   format = \"  downloading foobar at :rate, got :bytes in :elapsed\",   clear = FALSE, total = NA, width = 60) f <- function() {   for (i in 1:100) {     pb$tick(sample(1:100 * 1000, 1))     Sys.sleep(2/100)   }   pb$tick(1e7)   invisible() } f()  pb <- progress_bar$new(   format = \"  got :current rows at :tick_rate/sec\",   clear = FALSE, total = NA, width = 60) f <- function() {   for (i in 1:100) {     pb$tick(sample(1:100, 1))     Sys.sleep(2/100)   }   pb$terminate()   invisible() } f()  }"}]
